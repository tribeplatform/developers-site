(self.webpackChunkdevelopers=self.webpackChunkdevelopers||[]).push([[79294],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||i;return t?a.createElement(h,s(s({ref:n},m),{},{components:t})):a.createElement(h,s({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},94873:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var a=t(22122),r=t(19756),i=(t(67294),t(3905)),s=["components"],o={sidebar_position:5},l={unversionedId:"guide/graphql/making-queries",id:"guide/graphql/making-queries",isDocsHomePage:!1,title:"Making Queries",description:"A GraphQL query retrieves data from a server, similar to a GET request for a REST API. However, unlike REST, all GraphQL queries are sent to a single endpoint and use the POST http method.",source:"@site/docs/guide/graphql/making-queries.md",sourceDirName:"guide/graphql",slug:"/guide/graphql/making-queries",permalink:"/docs/guide/graphql/making-queries",editUrl:"https://github.com/tribeplatform/developers-site/edit/master/docs/guide/graphql/making-queries.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"guideSidebar",previous:{title:"Tribe Access Token",permalink:"/docs/guide/graphql/authentication/access-token"},next:{title:"Mutations",permalink:"/docs/guide/graphql/mutation"}},p=[{value:"Sample Query",id:"sample-query",children:[]},{value:"Arguments and Fields",id:"arguments-and-fields",children:[]},{value:"Connections",id:"connections",children:[]}],m={toc:p};function c(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A GraphQL query retrieves data from a server, similar to a GET request for a REST API. However, unlike REST, all GraphQL queries are sent to a single endpoint and use the POST http method."),(0,i.kt)("p",null,"A list of all queries available on Tribe's GraphQL API is available ",(0,i.kt)("a",{parentName:"p",href:"/docs/graphql/schema"},"here")," under ",(0,i.kt)("em",{parentName:"p"},"Queries")," section."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All requests to Tribe's GraphQL endpoint should be authenticated using ",(0,i.kt)("a",{parentName:"p",href:"/docs/guide/graphql/authentication/access-token"},"Tribe Access Token"),"."))),(0,i.kt)("h2",{id:"sample-query"},"Sample Query"),(0,i.kt)("p",null,"This query requests a space object, a few fields, and its members in a single request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="POST https://api.tribe.so/graphql"',title:'"POST','https://api.tribe.so/graphql"':!0},'query {\n  space(slug: "general") {\n    id\n    name\n    members(limit: 1) {\n      edges {\n        node {\n          member {\n            id\n            name\n          }\n        }\n      }\n      totalCount\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"JSON response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "space": {\n      "id": "Y4umRdAkY1aB",\n      "name": "General",\n      "members": {\n        "edges": [\n          {\n            "node": {\n              "member": {\n                "id": "2KONsPOR1z",\n                "name": "Siavash"\n              }\n            }\n          }\n        ],\n        "totalCount": 4\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Notice that after the data key, the shape of the response keys reflects the shape of the query keys."),(0,i.kt)("h2",{id:"arguments-and-fields"},"Arguments and Fields"),(0,i.kt)("p",null,"Queries can take arguments to fetch a specific object or filter list of objects."),(0,i.kt)("p",null,"As an example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"member")," queries a single member. In the ",(0,i.kt)("a",{parentName:"p",href:"/docs/graphql/queries/member"},"GraphQL API reference"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"member")," query takes ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," as an argument."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"is")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," specifies the member to query. After selecting the ",(0,i.kt)("inlineCode",{parentName:"p"},"Member"),", you list the fields on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/graphql/objects/member"},"Member object")," that you want to return."),(0,i.kt)("p",null,"This query gets a specific member, and selects a few fields from that object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="POST https://api.tribe.so/graphql"',title:'"POST','https://api.tribe.so/graphql"':!0},'query {\n  member(username: "admin") {\n    id\n    name\n    username\n    tagline\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"JSON Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "member": {\n      "id": "2KONsPORsA",\n      "name": "Siavash",\n      "username": "admin",\n      "tagline": "CEO at Tribe"\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"connections"},"Connections"),(0,i.kt)("p",null,"Connections are links between related objects. You can use connections to make nested queries, gathering information from multiple objects by traversing their connections in a single GraphQL call. If you're selecting something with a pluralized name, then you're often (but not always) using a connection."),(0,i.kt)("p",null,"When selecting a connection, you must provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"limit")," argument. This limits how many results are returned, and is a key component in managing rate-limiting and pagination. These subjects are covered later in this guide."),(0,i.kt)("p",null,"Within a connection, you need to select the ",(0,i.kt)("inlineCode",{parentName:"p"},"edges")," field. The ",(0,i.kt)("inlineCode",{parentName:"p"},"edges")," field returns an array of objects of the same type, such as member's joined spaces. After you\u2019ve selected the edges, you need to access the individual objects by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," field."),(0,i.kt)("p",null,"Similar to querying an individual node, you list the fields that you want to return. The response returns that data for each node in the connection. If a connection has fewer than the requested number of objects, then the response contains all the data that's available."),(0,i.kt)("p",null,"The following example requests a list of first 3 members and the first space they're part of using ",(0,i.kt)("inlineCode",{parentName:"p"},"members")," query and ",(0,i.kt)("inlineCode",{parentName:"p"},"spaces")," connection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="POST https://api.tribe.so/graphql"',title:'"POST','https://api.tribe.so/graphql"':!0},"query {\n  members(limit: 3) {\n    edges {\n      node {\n        id\n        name\n        spaces(limit: 1) {\n          edges {\n            node {\n              id\n              name\n            }\n          }\n          totalCount\n        }\n      }\n    }\n    totalCount\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"JSON Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "members": {\n      "edges": [\n        {\n          "node": {\n            "id": "I7Gvba5RaZ",\n            "name": "Siavash",\n            "spaces": {\n              "edges": [\n                {\n                  "node": {\n                    "id": "Y4umRdAkY11S",\n                    "name": "General"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In the example response, you can see that the community only has a single member because only one set of data was returned."))))}c.isMDXComponent=!0}}]);